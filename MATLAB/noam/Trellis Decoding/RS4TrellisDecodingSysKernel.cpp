//Copyright 2019 Michael Milkov
// 
//Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
//documentation files (the "Software"), to deal in the Software without restriction, including without limitation
//the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
//and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
// 
//The above copyright notice and this permission notice shall be included in all copies or substantial portions
//of the Software.
// 
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO
//THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL 
//THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
//TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

#include "PolarCodeRS4.h"
void   RS4_LogLSC::trellisRS4DecodeU0(double** LLInput,double** outLL)
{
// H = [1,1,1,a^2]
// cosetVector = [1,0,0,0]
// automatically generated by Matlab 20-May-2014



// Transition = 0
double sL1_0 = LLInput[0][0] ; // (transition = 0) 0 ---0---> 0
double sL1_1 = LLInput[1][0] ; // (transition = 0) 0 ---1---> 1
double sL1_2 = LLInput[2][0] ; // (transition = 0) 0 ---a^1---> a^1
double sL1_3 = LLInput[3][0] ; // (transition = 0) 0 ---a^2---> a^2



 // Transition = 1
double sL2_0 =  sL1_0 + LLInput[0][1]  ; // (transition = 1) 0 ---0---> 0
double sL2_1 =  sL1_0 + LLInput[1][1]  ; // (transition = 1) 0 ---1---> 1
double sL2_2 =  sL1_0 + LLInput[2][1]  ; // (transition = 1) 0 ---a^1---> a^1
double sL2_3 =  sL1_0 + LLInput[3][1]  ; // (transition = 1) 0 ---a^2---> a^2
sL2_1 = Utils::addLogLikelihoods(sL2_1,  sL1_1 + LLInput[0][1] ) ; // (transition = 1) 1 ---0---> 1
sL2_0 = Utils::addLogLikelihoods(sL2_0,  sL1_1 + LLInput[1][1] ) ; // (transition = 1) 1 ---1---> 0
sL2_3 = Utils::addLogLikelihoods(sL2_3,  sL1_1 + LLInput[2][1] ) ; // (transition = 1) 1 ---a^1---> a^2
sL2_2 = Utils::addLogLikelihoods(sL2_2,  sL1_1 + LLInput[3][1] ) ; // (transition = 1) 1 ---a^2---> a^1
sL2_2 = Utils::addLogLikelihoods(sL2_2,  sL1_2 + LLInput[0][1] ) ; // (transition = 1) a^1 ---0---> a^1
sL2_3 = Utils::addLogLikelihoods(sL2_3,  sL1_2 + LLInput[1][1] ) ; // (transition = 1) a^1 ---1---> a^2
sL2_0 = Utils::addLogLikelihoods(sL2_0,  sL1_2 + LLInput[2][1] ) ; // (transition = 1) a^1 ---a^1---> 0
sL2_1 = Utils::addLogLikelihoods(sL2_1,  sL1_2 + LLInput[3][1] ) ; // (transition = 1) a^1 ---a^2---> 1
sL2_3 = Utils::addLogLikelihoods(sL2_3,  sL1_3 + LLInput[0][1] ) ; // (transition = 1) a^2 ---0---> a^2
sL2_2 = Utils::addLogLikelihoods(sL2_2,  sL1_3 + LLInput[1][1] ) ; // (transition = 1) a^2 ---1---> a^1
sL2_1 = Utils::addLogLikelihoods(sL2_1,  sL1_3 + LLInput[2][1] ) ; // (transition = 1) a^2 ---a^1---> 1
sL2_0 = Utils::addLogLikelihoods(sL2_0,  sL1_3 + LLInput[3][1] ) ; // (transition = 1) a^2 ---a^2---> 0



 // Transition = 2
double sL3_0 =  sL2_0 + LLInput[0][2]  ; // (transition = 2) 0 ---0---> 0
double sL3_1 =  sL2_0 + LLInput[1][2]  ; // (transition = 2) 0 ---1---> 1
double sL3_2 =  sL2_0 + LLInput[2][2]  ; // (transition = 2) 0 ---a^1---> a^1
double sL3_3 =  sL2_0 + LLInput[3][2]  ; // (transition = 2) 0 ---a^2---> a^2
sL3_1 = Utils::addLogLikelihoods(sL3_1,  sL2_1 + LLInput[0][2] ) ; // (transition = 2) 1 ---0---> 1
sL3_0 = Utils::addLogLikelihoods(sL3_0,  sL2_1 + LLInput[1][2] ) ; // (transition = 2) 1 ---1---> 0
sL3_3 = Utils::addLogLikelihoods(sL3_3,  sL2_1 + LLInput[2][2] ) ; // (transition = 2) 1 ---a^1---> a^2
sL3_2 = Utils::addLogLikelihoods(sL3_2,  sL2_1 + LLInput[3][2] ) ; // (transition = 2) 1 ---a^2---> a^1
sL3_2 = Utils::addLogLikelihoods(sL3_2,  sL2_2 + LLInput[0][2] ) ; // (transition = 2) a^1 ---0---> a^1
sL3_3 = Utils::addLogLikelihoods(sL3_3,  sL2_2 + LLInput[1][2] ) ; // (transition = 2) a^1 ---1---> a^2
sL3_0 = Utils::addLogLikelihoods(sL3_0,  sL2_2 + LLInput[2][2] ) ; // (transition = 2) a^1 ---a^1---> 0
sL3_1 = Utils::addLogLikelihoods(sL3_1,  sL2_2 + LLInput[3][2] ) ; // (transition = 2) a^1 ---a^2---> 1
sL3_3 = Utils::addLogLikelihoods(sL3_3,  sL2_3 + LLInput[0][2] ) ; // (transition = 2) a^2 ---0---> a^2
sL3_2 = Utils::addLogLikelihoods(sL3_2,  sL2_3 + LLInput[1][2] ) ; // (transition = 2) a^2 ---1---> a^1
sL3_1 = Utils::addLogLikelihoods(sL3_1,  sL2_3 + LLInput[2][2] ) ; // (transition = 2) a^2 ---a^1---> 1
sL3_0 = Utils::addLogLikelihoods(sL3_0,  sL2_3 + LLInput[3][2] ) ; // (transition = 2) a^2 ---a^2---> 0



 // Transition = 3
double sL4_0 =  sL3_0 + LLInput[0][3]  ; // (transition = 3) 0 ---0---> 0
double sL4_3 =  sL3_0 + LLInput[1][3]  ; // (transition = 3) 0 ---1---> a^2
double sL4_1 =  sL3_0 + LLInput[2][3]  ; // (transition = 3) 0 ---a^1---> 1
double sL4_2 =  sL3_0 + LLInput[3][3]  ; // (transition = 3) 0 ---a^2---> a^1
sL4_1 = Utils::addLogLikelihoods(sL4_1,  sL3_1 + LLInput[0][3] ) ; // (transition = 3) 1 ---0---> 1
sL4_2 = Utils::addLogLikelihoods(sL4_2,  sL3_1 + LLInput[1][3] ) ; // (transition = 3) 1 ---1---> a^1
sL4_0 = Utils::addLogLikelihoods(sL4_0,  sL3_1 + LLInput[2][3] ) ; // (transition = 3) 1 ---a^1---> 0
sL4_3 = Utils::addLogLikelihoods(sL4_3,  sL3_1 + LLInput[3][3] ) ; // (transition = 3) 1 ---a^2---> a^2
sL4_2 = Utils::addLogLikelihoods(sL4_2,  sL3_2 + LLInput[0][3] ) ; // (transition = 3) a^1 ---0---> a^1
sL4_1 = Utils::addLogLikelihoods(sL4_1,  sL3_2 + LLInput[1][3] ) ; // (transition = 3) a^1 ---1---> 1
sL4_3 = Utils::addLogLikelihoods(sL4_3,  sL3_2 + LLInput[2][3] ) ; // (transition = 3) a^1 ---a^1---> a^2
sL4_0 = Utils::addLogLikelihoods(sL4_0,  sL3_2 + LLInput[3][3] ) ; // (transition = 3) a^1 ---a^2---> 0
sL4_3 = Utils::addLogLikelihoods(sL4_3,  sL3_3 + LLInput[0][3] ) ; // (transition = 3) a^2 ---0---> a^2
sL4_0 = Utils::addLogLikelihoods(sL4_0,  sL3_3 + LLInput[1][3] ) ; // (transition = 3) a^2 ---1---> 0
sL4_2 = Utils::addLogLikelihoods(sL4_2,  sL3_3 + LLInput[2][3] ) ; // (transition = 3) a^2 ---a^1---> a^1
sL4_1 = Utils::addLogLikelihoods(sL4_1,  sL3_3 + LLInput[3][3] ) ; // (transition = 3) a^2 ---a^2---> 1


// output: 
*outLL[0] = sL4_0 ; // symbol = 0 
*outLL[1] = sL4_1 ; // symbol = 1 
*outLL[2] = sL4_2 ; // symbol = a^1 
*outLL[3] = sL4_3 ; // symbol = a^2 

// num of initializations = 16
// num of additions = 48
// num of LL additions = 36
}
void   RS4_LogLSC::trellisRS4DecodeU1(double** LLInput,double** outLL)
{
// H = [[1,1,1,a^2];[a^1,a^2,0,a^2]]
// cosetVector = [1,1,0,0]
// automatically generated by Matlab 20-May-2014



// Transition = 0
double sL1_0_0 = LLInput[0][0] ; // (transition = 0) [0,0] ---0---> [0,0]
double sL1_1_2 = LLInput[1][0] ; // (transition = 0) [0,0] ---1---> [1,a^1]
double sL1_2_3 = LLInput[2][0] ; // (transition = 0) [0,0] ---a^1---> [a^1,a^2]
double sL1_3_1 = LLInput[3][0] ; // (transition = 0) [0,0] ---a^2---> [a^2,1]



 // Transition = 1
double sL2_0_0 =  sL1_0_0 + LLInput[0][1]  ; // (transition = 1) [0,0] ---0---> [0,0]
double sL2_1_3 =  sL1_0_0 + LLInput[1][1]  ; // (transition = 1) [0,0] ---1---> [1,a^2]
double sL2_2_1 =  sL1_0_0 + LLInput[2][1]  ; // (transition = 1) [0,0] ---a^1---> [a^1,1]
double sL2_3_2 =  sL1_0_0 + LLInput[3][1]  ; // (transition = 1) [0,0] ---a^2---> [a^2,a^1]
double sL2_1_2 =  sL1_1_2 + LLInput[0][1]  ; // (transition = 1) [1,a^1] ---0---> [1,a^1]
double sL2_0_1 =  sL1_1_2 + LLInput[1][1]  ; // (transition = 1) [1,a^1] ---1---> [0,1]
double sL2_3_3 =  sL1_1_2 + LLInput[2][1]  ; // (transition = 1) [1,a^1] ---a^1---> [a^2,a^2]
double sL2_2_0 =  sL1_1_2 + LLInput[3][1]  ; // (transition = 1) [1,a^1] ---a^2---> [a^1,0]
double sL2_2_3 =  sL1_2_3 + LLInput[0][1]  ; // (transition = 1) [a^1,a^2] ---0---> [a^1,a^2]
double sL2_3_0 =  sL1_2_3 + LLInput[1][1]  ; // (transition = 1) [a^1,a^2] ---1---> [a^2,0]
double sL2_0_2 =  sL1_2_3 + LLInput[2][1]  ; // (transition = 1) [a^1,a^2] ---a^1---> [0,a^1]
double sL2_1_1 =  sL1_2_3 + LLInput[3][1]  ; // (transition = 1) [a^1,a^2] ---a^2---> [1,1]
double sL2_3_1 =  sL1_3_1 + LLInput[0][1]  ; // (transition = 1) [a^2,1] ---0---> [a^2,1]
double sL2_2_2 =  sL1_3_1 + LLInput[1][1]  ; // (transition = 1) [a^2,1] ---1---> [a^1,a^1]
double sL2_1_0 =  sL1_3_1 + LLInput[2][1]  ; // (transition = 1) [a^2,1] ---a^1---> [1,0]
double sL2_0_3 =  sL1_3_1 + LLInput[3][1]  ; // (transition = 1) [a^2,1] ---a^2---> [0,a^2]



 // Transition = 2
double sL3_0_0 =  sL2_0_0 + LLInput[0][2]  ; // (transition = 2) [0,0] ---0---> [0,0]
double sL3_1_0 =  sL2_0_0 + LLInput[1][2]  ; // (transition = 2) [0,0] ---1---> [1,0]
double sL3_2_0 =  sL2_0_0 + LLInput[2][2]  ; // (transition = 2) [0,0] ---a^1---> [a^1,0]
double sL3_3_0 =  sL2_0_0 + LLInput[3][2]  ; // (transition = 2) [0,0] ---a^2---> [a^2,0]
double sL3_1_3 =  sL2_1_3 + LLInput[0][2]  ; // (transition = 2) [1,a^2] ---0---> [1,a^2]
double sL3_0_3 =  sL2_1_3 + LLInput[1][2]  ; // (transition = 2) [1,a^2] ---1---> [0,a^2]
double sL3_3_3 =  sL2_1_3 + LLInput[2][2]  ; // (transition = 2) [1,a^2] ---a^1---> [a^2,a^2]
double sL3_2_3 =  sL2_1_3 + LLInput[3][2]  ; // (transition = 2) [1,a^2] ---a^2---> [a^1,a^2]
double sL3_2_1 =  sL2_2_1 + LLInput[0][2]  ; // (transition = 2) [a^1,1] ---0---> [a^1,1]
double sL3_3_1 =  sL2_2_1 + LLInput[1][2]  ; // (transition = 2) [a^1,1] ---1---> [a^2,1]
double sL3_0_1 =  sL2_2_1 + LLInput[2][2]  ; // (transition = 2) [a^1,1] ---a^1---> [0,1]
double sL3_1_1 =  sL2_2_1 + LLInput[3][2]  ; // (transition = 2) [a^1,1] ---a^2---> [1,1]
double sL3_3_2 =  sL2_3_2 + LLInput[0][2]  ; // (transition = 2) [a^2,a^1] ---0---> [a^2,a^1]
double sL3_2_2 =  sL2_3_2 + LLInput[1][2]  ; // (transition = 2) [a^2,a^1] ---1---> [a^1,a^1]
double sL3_1_2 =  sL2_3_2 + LLInput[2][2]  ; // (transition = 2) [a^2,a^1] ---a^1---> [1,a^1]
double sL3_0_2 =  sL2_3_2 + LLInput[3][2]  ; // (transition = 2) [a^2,a^1] ---a^2---> [0,a^1]
sL3_1_2 = Utils::addLogLikelihoods(sL3_1_2,  sL2_1_2 + LLInput[0][2] ) ; // (transition = 2) [1,a^1] ---0---> [1,a^1]
sL3_0_2 = Utils::addLogLikelihoods(sL3_0_2,  sL2_1_2 + LLInput[1][2] ) ; // (transition = 2) [1,a^1] ---1---> [0,a^1]
sL3_3_2 = Utils::addLogLikelihoods(sL3_3_2,  sL2_1_2 + LLInput[2][2] ) ; // (transition = 2) [1,a^1] ---a^1---> [a^2,a^1]
sL3_2_2 = Utils::addLogLikelihoods(sL3_2_2,  sL2_1_2 + LLInput[3][2] ) ; // (transition = 2) [1,a^1] ---a^2---> [a^1,a^1]
sL3_0_1 = Utils::addLogLikelihoods(sL3_0_1,  sL2_0_1 + LLInput[0][2] ) ; // (transition = 2) [0,1] ---0---> [0,1]
sL3_1_1 = Utils::addLogLikelihoods(sL3_1_1,  sL2_0_1 + LLInput[1][2] ) ; // (transition = 2) [0,1] ---1---> [1,1]
sL3_2_1 = Utils::addLogLikelihoods(sL3_2_1,  sL2_0_1 + LLInput[2][2] ) ; // (transition = 2) [0,1] ---a^1---> [a^1,1]
sL3_3_1 = Utils::addLogLikelihoods(sL3_3_1,  sL2_0_1 + LLInput[3][2] ) ; // (transition = 2) [0,1] ---a^2---> [a^2,1]
sL3_3_3 = Utils::addLogLikelihoods(sL3_3_3,  sL2_3_3 + LLInput[0][2] ) ; // (transition = 2) [a^2,a^2] ---0---> [a^2,a^2]
sL3_2_3 = Utils::addLogLikelihoods(sL3_2_3,  sL2_3_3 + LLInput[1][2] ) ; // (transition = 2) [a^2,a^2] ---1---> [a^1,a^2]
sL3_1_3 = Utils::addLogLikelihoods(sL3_1_3,  sL2_3_3 + LLInput[2][2] ) ; // (transition = 2) [a^2,a^2] ---a^1---> [1,a^2]
sL3_0_3 = Utils::addLogLikelihoods(sL3_0_3,  sL2_3_3 + LLInput[3][2] ) ; // (transition = 2) [a^2,a^2] ---a^2---> [0,a^2]
sL3_2_0 = Utils::addLogLikelihoods(sL3_2_0,  sL2_2_0 + LLInput[0][2] ) ; // (transition = 2) [a^1,0] ---0---> [a^1,0]
sL3_3_0 = Utils::addLogLikelihoods(sL3_3_0,  sL2_2_0 + LLInput[1][2] ) ; // (transition = 2) [a^1,0] ---1---> [a^2,0]
sL3_0_0 = Utils::addLogLikelihoods(sL3_0_0,  sL2_2_0 + LLInput[2][2] ) ; // (transition = 2) [a^1,0] ---a^1---> [0,0]
sL3_1_0 = Utils::addLogLikelihoods(sL3_1_0,  sL2_2_0 + LLInput[3][2] ) ; // (transition = 2) [a^1,0] ---a^2---> [1,0]
sL3_2_3 = Utils::addLogLikelihoods(sL3_2_3,  sL2_2_3 + LLInput[0][2] ) ; // (transition = 2) [a^1,a^2] ---0---> [a^1,a^2]
sL3_3_3 = Utils::addLogLikelihoods(sL3_3_3,  sL2_2_3 + LLInput[1][2] ) ; // (transition = 2) [a^1,a^2] ---1---> [a^2,a^2]
sL3_0_3 = Utils::addLogLikelihoods(sL3_0_3,  sL2_2_3 + LLInput[2][2] ) ; // (transition = 2) [a^1,a^2] ---a^1---> [0,a^2]
sL3_1_3 = Utils::addLogLikelihoods(sL3_1_3,  sL2_2_3 + LLInput[3][2] ) ; // (transition = 2) [a^1,a^2] ---a^2---> [1,a^2]
sL3_3_0 = Utils::addLogLikelihoods(sL3_3_0,  sL2_3_0 + LLInput[0][2] ) ; // (transition = 2) [a^2,0] ---0---> [a^2,0]
sL3_2_0 = Utils::addLogLikelihoods(sL3_2_0,  sL2_3_0 + LLInput[1][2] ) ; // (transition = 2) [a^2,0] ---1---> [a^1,0]
sL3_1_0 = Utils::addLogLikelihoods(sL3_1_0,  sL2_3_0 + LLInput[2][2] ) ; // (transition = 2) [a^2,0] ---a^1---> [1,0]
sL3_0_0 = Utils::addLogLikelihoods(sL3_0_0,  sL2_3_0 + LLInput[3][2] ) ; // (transition = 2) [a^2,0] ---a^2---> [0,0]
sL3_0_2 = Utils::addLogLikelihoods(sL3_0_2,  sL2_0_2 + LLInput[0][2] ) ; // (transition = 2) [0,a^1] ---0---> [0,a^1]
sL3_1_2 = Utils::addLogLikelihoods(sL3_1_2,  sL2_0_2 + LLInput[1][2] ) ; // (transition = 2) [0,a^1] ---1---> [1,a^1]
sL3_2_2 = Utils::addLogLikelihoods(sL3_2_2,  sL2_0_2 + LLInput[2][2] ) ; // (transition = 2) [0,a^1] ---a^1---> [a^1,a^1]
sL3_3_2 = Utils::addLogLikelihoods(sL3_3_2,  sL2_0_2 + LLInput[3][2] ) ; // (transition = 2) [0,a^1] ---a^2---> [a^2,a^1]
sL3_1_1 = Utils::addLogLikelihoods(sL3_1_1,  sL2_1_1 + LLInput[0][2] ) ; // (transition = 2) [1,1] ---0---> [1,1]
sL3_0_1 = Utils::addLogLikelihoods(sL3_0_1,  sL2_1_1 + LLInput[1][2] ) ; // (transition = 2) [1,1] ---1---> [0,1]
sL3_3_1 = Utils::addLogLikelihoods(sL3_3_1,  sL2_1_1 + LLInput[2][2] ) ; // (transition = 2) [1,1] ---a^1---> [a^2,1]
sL3_2_1 = Utils::addLogLikelihoods(sL3_2_1,  sL2_1_1 + LLInput[3][2] ) ; // (transition = 2) [1,1] ---a^2---> [a^1,1]
sL3_3_1 = Utils::addLogLikelihoods(sL3_3_1,  sL2_3_1 + LLInput[0][2] ) ; // (transition = 2) [a^2,1] ---0---> [a^2,1]
sL3_2_1 = Utils::addLogLikelihoods(sL3_2_1,  sL2_3_1 + LLInput[1][2] ) ; // (transition = 2) [a^2,1] ---1---> [a^1,1]
sL3_1_1 = Utils::addLogLikelihoods(sL3_1_1,  sL2_3_1 + LLInput[2][2] ) ; // (transition = 2) [a^2,1] ---a^1---> [1,1]
sL3_0_1 = Utils::addLogLikelihoods(sL3_0_1,  sL2_3_1 + LLInput[3][2] ) ; // (transition = 2) [a^2,1] ---a^2---> [0,1]
sL3_2_2 = Utils::addLogLikelihoods(sL3_2_2,  sL2_2_2 + LLInput[0][2] ) ; // (transition = 2) [a^1,a^1] ---0---> [a^1,a^1]
sL3_3_2 = Utils::addLogLikelihoods(sL3_3_2,  sL2_2_2 + LLInput[1][2] ) ; // (transition = 2) [a^1,a^1] ---1---> [a^2,a^1]
sL3_0_2 = Utils::addLogLikelihoods(sL3_0_2,  sL2_2_2 + LLInput[2][2] ) ; // (transition = 2) [a^1,a^1] ---a^1---> [0,a^1]
sL3_1_2 = Utils::addLogLikelihoods(sL3_1_2,  sL2_2_2 + LLInput[3][2] ) ; // (transition = 2) [a^1,a^1] ---a^2---> [1,a^1]
sL3_1_0 = Utils::addLogLikelihoods(sL3_1_0,  sL2_1_0 + LLInput[0][2] ) ; // (transition = 2) [1,0] ---0---> [1,0]
sL3_0_0 = Utils::addLogLikelihoods(sL3_0_0,  sL2_1_0 + LLInput[1][2] ) ; // (transition = 2) [1,0] ---1---> [0,0]
sL3_3_0 = Utils::addLogLikelihoods(sL3_3_0,  sL2_1_0 + LLInput[2][2] ) ; // (transition = 2) [1,0] ---a^1---> [a^2,0]
sL3_2_0 = Utils::addLogLikelihoods(sL3_2_0,  sL2_1_0 + LLInput[3][2] ) ; // (transition = 2) [1,0] ---a^2---> [a^1,0]
sL3_0_3 = Utils::addLogLikelihoods(sL3_0_3,  sL2_0_3 + LLInput[0][2] ) ; // (transition = 2) [0,a^2] ---0---> [0,a^2]
sL3_1_3 = Utils::addLogLikelihoods(sL3_1_3,  sL2_0_3 + LLInput[1][2] ) ; // (transition = 2) [0,a^2] ---1---> [1,a^2]
sL3_2_3 = Utils::addLogLikelihoods(sL3_2_3,  sL2_0_3 + LLInput[2][2] ) ; // (transition = 2) [0,a^2] ---a^1---> [a^1,a^2]
sL3_3_3 = Utils::addLogLikelihoods(sL3_3_3,  sL2_0_3 + LLInput[3][2] ) ; // (transition = 2) [0,a^2] ---a^2---> [a^2,a^2]



 // Transition = 3
double sL4_0_0 =  sL3_0_0 + LLInput[0][3]  ; // (transition = 3) [0,0] ---0---> [0,0]
double sL4_0_1 =  sL3_1_0 + LLInput[2][3]  ; // (transition = 3) [1,0] ---a^1---> [0,1]
double sL4_0_2 =  sL3_2_0 + LLInput[3][3]  ; // (transition = 3) [a^1,0] ---a^2---> [0,a^1]
double sL4_0_3 =  sL3_3_0 + LLInput[1][3]  ; // (transition = 3) [a^2,0] ---1---> [0,a^2]
sL4_0_2 = Utils::addLogLikelihoods(sL4_0_2,  sL3_1_3 + LLInput[2][3] ) ; // (transition = 3) [1,a^2] ---a^1---> [0,a^1]
sL4_0_3 = Utils::addLogLikelihoods(sL4_0_3,  sL3_0_3 + LLInput[0][3] ) ; // (transition = 3) [0,a^2] ---0---> [0,a^2]
sL4_0_0 = Utils::addLogLikelihoods(sL4_0_0,  sL3_3_3 + LLInput[1][3] ) ; // (transition = 3) [a^2,a^2] ---1---> [0,0]
sL4_0_1 = Utils::addLogLikelihoods(sL4_0_1,  sL3_2_3 + LLInput[3][3] ) ; // (transition = 3) [a^1,a^2] ---a^2---> [0,1]
sL4_0_3 = Utils::addLogLikelihoods(sL4_0_3,  sL3_2_1 + LLInput[3][3] ) ; // (transition = 3) [a^1,1] ---a^2---> [0,a^2]
sL4_0_2 = Utils::addLogLikelihoods(sL4_0_2,  sL3_3_1 + LLInput[1][3] ) ; // (transition = 3) [a^2,1] ---1---> [0,a^1]
sL4_0_1 = Utils::addLogLikelihoods(sL4_0_1,  sL3_0_1 + LLInput[0][3] ) ; // (transition = 3) [0,1] ---0---> [0,1]
sL4_0_0 = Utils::addLogLikelihoods(sL4_0_0,  sL3_1_1 + LLInput[2][3] ) ; // (transition = 3) [1,1] ---a^1---> [0,0]
sL4_0_1 = Utils::addLogLikelihoods(sL4_0_1,  sL3_3_2 + LLInput[1][3] ) ; // (transition = 3) [a^2,a^1] ---1---> [0,1]
sL4_0_0 = Utils::addLogLikelihoods(sL4_0_0,  sL3_2_2 + LLInput[3][3] ) ; // (transition = 3) [a^1,a^1] ---a^2---> [0,0]
sL4_0_3 = Utils::addLogLikelihoods(sL4_0_3,  sL3_1_2 + LLInput[2][3] ) ; // (transition = 3) [1,a^1] ---a^1---> [0,a^2]
sL4_0_2 = Utils::addLogLikelihoods(sL4_0_2,  sL3_0_2 + LLInput[0][3] ) ; // (transition = 3) [0,a^1] ---0---> [0,a^1]


// output: 
*outLL[0] = sL4_0_0 ; // symbol = 0 
*outLL[1] = sL4_0_1 ; // symbol = 1 
*outLL[2] = sL4_0_2 ; // symbol = a^1 
*outLL[3] = sL4_0_3 ; // symbol = a^2 

// num of initializations = 40
// num of additions = 96
// num of LL additions = 60
}
void   RS4_LogLSC::trellisRS4DecodeU2(double** LLInput,double** outLL)
{
// H = [[1,1,0,0];[1,0,1,0];[a^1,0,0,1]]
// cosetVector = [a^2,a^1,1,0]
// automatically generated by Matlab 20-May-2014



// Transition = 0
double sL1_0_0_0 = LLInput[0][0] ; // (transition = 0) [0,0,0] ---0---> [0,0,0]
double sL1_1_1_2 = LLInput[1][0] ; // (transition = 0) [0,0,0] ---1---> [1,1,a^1]
double sL1_2_2_3 = LLInput[2][0] ; // (transition = 0) [0,0,0] ---a^1---> [a^1,a^1,a^2]
double sL1_3_3_1 = LLInput[3][0] ; // (transition = 0) [0,0,0] ---a^2---> [a^2,a^2,1]



 // Transition = 1
double sL2_0_0_0 =  sL1_0_0_0 + LLInput[0][1]  ; // (transition = 1) [0,0,0] ---0---> [0,0,0]
double sL2_1_0_0 =  sL1_0_0_0 + LLInput[1][1]  ; // (transition = 1) [0,0,0] ---1---> [1,0,0]
double sL2_2_0_0 =  sL1_0_0_0 + LLInput[2][1]  ; // (transition = 1) [0,0,0] ---a^1---> [a^1,0,0]
double sL2_3_0_0 =  sL1_0_0_0 + LLInput[3][1]  ; // (transition = 1) [0,0,0] ---a^2---> [a^2,0,0]
double sL2_1_1_2 =  sL1_1_1_2 + LLInput[0][1]  ; // (transition = 1) [1,1,a^1] ---0---> [1,1,a^1]
double sL2_0_1_2 =  sL1_1_1_2 + LLInput[1][1]  ; // (transition = 1) [1,1,a^1] ---1---> [0,1,a^1]
double sL2_3_1_2 =  sL1_1_1_2 + LLInput[2][1]  ; // (transition = 1) [1,1,a^1] ---a^1---> [a^2,1,a^1]
double sL2_2_1_2 =  sL1_1_1_2 + LLInput[3][1]  ; // (transition = 1) [1,1,a^1] ---a^2---> [a^1,1,a^1]
double sL2_2_2_3 =  sL1_2_2_3 + LLInput[0][1]  ; // (transition = 1) [a^1,a^1,a^2] ---0---> [a^1,a^1,a^2]
double sL2_3_2_3 =  sL1_2_2_3 + LLInput[1][1]  ; // (transition = 1) [a^1,a^1,a^2] ---1---> [a^2,a^1,a^2]
double sL2_0_2_3 =  sL1_2_2_3 + LLInput[2][1]  ; // (transition = 1) [a^1,a^1,a^2] ---a^1---> [0,a^1,a^2]
double sL2_1_2_3 =  sL1_2_2_3 + LLInput[3][1]  ; // (transition = 1) [a^1,a^1,a^2] ---a^2---> [1,a^1,a^2]
double sL2_3_3_1 =  sL1_3_3_1 + LLInput[0][1]  ; // (transition = 1) [a^2,a^2,1] ---0---> [a^2,a^2,1]
double sL2_2_3_1 =  sL1_3_3_1 + LLInput[1][1]  ; // (transition = 1) [a^2,a^2,1] ---1---> [a^1,a^2,1]
double sL2_1_3_1 =  sL1_3_3_1 + LLInput[2][1]  ; // (transition = 1) [a^2,a^2,1] ---a^1---> [1,a^2,1]
double sL2_0_3_1 =  sL1_3_3_1 + LLInput[3][1]  ; // (transition = 1) [a^2,a^2,1] ---a^2---> [0,a^2,1]



 // Transition = 2
double sL3_0_0_0 =  sL2_0_0_0 + LLInput[0][2]  ; // (transition = 2) [0,0,0] ---0---> [0,0,0]
double sL3_1_2_0 =  sL2_1_0_0 + LLInput[2][2]  ; // (transition = 2) [1,0,0] ---a^1---> [1,a^1,0]
double sL3_2_3_0 =  sL2_2_0_0 + LLInput[3][2]  ; // (transition = 2) [a^1,0,0] ---a^2---> [a^1,a^2,0]
double sL3_3_1_0 =  sL2_3_0_0 + LLInput[1][2]  ; // (transition = 2) [a^2,0,0] ---1---> [a^2,1,0]
double sL3_1_2_2 =  sL2_1_1_2 + LLInput[3][2]  ; // (transition = 2) [1,1,a^1] ---a^2---> [1,a^1,a^1]
double sL3_0_0_2 =  sL2_0_1_2 + LLInput[1][2]  ; // (transition = 2) [0,1,a^1] ---1---> [0,0,a^1]
double sL3_3_1_2 =  sL2_3_1_2 + LLInput[0][2]  ; // (transition = 2) [a^2,1,a^1] ---0---> [a^2,1,a^1]
double sL3_2_3_2 =  sL2_2_1_2 + LLInput[2][2]  ; // (transition = 2) [a^1,1,a^1] ---a^1---> [a^1,a^2,a^1]
double sL3_2_3_3 =  sL2_2_2_3 + LLInput[1][2]  ; // (transition = 2) [a^1,a^1,a^2] ---1---> [a^1,a^2,a^2]
double sL3_3_1_3 =  sL2_3_2_3 + LLInput[3][2]  ; // (transition = 2) [a^2,a^1,a^2] ---a^2---> [a^2,1,a^2]
double sL3_0_0_3 =  sL2_0_2_3 + LLInput[2][2]  ; // (transition = 2) [0,a^1,a^2] ---a^1---> [0,0,a^2]
double sL3_1_2_3 =  sL2_1_2_3 + LLInput[0][2]  ; // (transition = 2) [1,a^1,a^2] ---0---> [1,a^1,a^2]
double sL3_3_1_1 =  sL2_3_3_1 + LLInput[2][2]  ; // (transition = 2) [a^2,a^2,1] ---a^1---> [a^2,1,1]
double sL3_2_3_1 =  sL2_2_3_1 + LLInput[0][2]  ; // (transition = 2) [a^1,a^2,1] ---0---> [a^1,a^2,1]
double sL3_1_2_1 =  sL2_1_3_1 + LLInput[1][2]  ; // (transition = 2) [1,a^2,1] ---1---> [1,a^1,1]
double sL3_0_0_1 =  sL2_0_3_1 + LLInput[3][2]  ; // (transition = 2) [0,a^2,1] ---a^2---> [0,0,1]



 // Transition = 3
double sL4_0_0_0 =  sL3_0_0_0 + LLInput[0][3]  ; // (transition = 3) [0,0,0] ---0---> [0,0,0]
double sL4_1_2_1 =  sL3_1_2_0 + LLInput[1][3]  ; // (transition = 3) [1,a^1,0] ---1---> [1,a^1,1]
double sL4_2_3_2 =  sL3_2_3_0 + LLInput[2][3]  ; // (transition = 3) [a^1,a^2,0] ---a^1---> [a^1,a^2,a^1]
double sL4_3_1_3 =  sL3_3_1_0 + LLInput[3][3]  ; // (transition = 3) [a^2,1,0] ---a^2---> [a^2,1,a^2]
sL4_1_2_1 = Utils::addLogLikelihoods(sL4_1_2_1,  sL3_1_2_2 + LLInput[3][3] ) ; // (transition = 3) [1,a^1,a^1] ---a^2---> [1,a^1,1]
sL4_0_0_0 = Utils::addLogLikelihoods(sL4_0_0_0,  sL3_0_0_2 + LLInput[2][3] ) ; // (transition = 3) [0,0,a^1] ---a^1---> [0,0,0]
sL4_3_1_3 = Utils::addLogLikelihoods(sL4_3_1_3,  sL3_3_1_2 + LLInput[1][3] ) ; // (transition = 3) [a^2,1,a^1] ---1---> [a^2,1,a^2]
sL4_2_3_2 = Utils::addLogLikelihoods(sL4_2_3_2,  sL3_2_3_2 + LLInput[0][3] ) ; // (transition = 3) [a^1,a^2,a^1] ---0---> [a^1,a^2,a^1]
sL4_2_3_2 = Utils::addLogLikelihoods(sL4_2_3_2,  sL3_2_3_3 + LLInput[1][3] ) ; // (transition = 3) [a^1,a^2,a^2] ---1---> [a^1,a^2,a^1]
sL4_3_1_3 = Utils::addLogLikelihoods(sL4_3_1_3,  sL3_3_1_3 + LLInput[0][3] ) ; // (transition = 3) [a^2,1,a^2] ---0---> [a^2,1,a^2]
sL4_0_0_0 = Utils::addLogLikelihoods(sL4_0_0_0,  sL3_0_0_3 + LLInput[3][3] ) ; // (transition = 3) [0,0,a^2] ---a^2---> [0,0,0]
sL4_1_2_1 = Utils::addLogLikelihoods(sL4_1_2_1,  sL3_1_2_3 + LLInput[2][3] ) ; // (transition = 3) [1,a^1,a^2] ---a^1---> [1,a^1,1]
sL4_3_1_3 = Utils::addLogLikelihoods(sL4_3_1_3,  sL3_3_1_1 + LLInput[2][3] ) ; // (transition = 3) [a^2,1,1] ---a^1---> [a^2,1,a^2]
sL4_2_3_2 = Utils::addLogLikelihoods(sL4_2_3_2,  sL3_2_3_1 + LLInput[3][3] ) ; // (transition = 3) [a^1,a^2,1] ---a^2---> [a^1,a^2,a^1]
sL4_1_2_1 = Utils::addLogLikelihoods(sL4_1_2_1,  sL3_1_2_1 + LLInput[0][3] ) ; // (transition = 3) [1,a^1,1] ---0---> [1,a^1,1]
sL4_0_0_0 = Utils::addLogLikelihoods(sL4_0_0_0,  sL3_0_0_1 + LLInput[1][3] ) ; // (transition = 3) [0,0,1] ---1---> [0,0,0]


// output: 
*outLL[0] = sL4_0_0_0 ; // symbol = 0 
*outLL[1] = sL4_1_2_1 ; // symbol = 1 
*outLL[2] = sL4_2_3_2 ; // symbol = a^1 
*outLL[3] = sL4_3_1_3 ; // symbol = a^2 

// num of initializations = 40
// num of additions = 48
// num of LL additions = 12
}
void   RS4_LogLSC::trellisRS4DecodeU3(double** LLInput,double** outLL)
{
// H = [[1,0,0,0];[0,1,0,0];[0,0,1,0];[0,0,0,1]]
// cosetVector = [1,1,1,a^1]
// automatically generated by Matlab 20-May-2014



// Transition = 0
double sL1_0_0_0_0 = LLInput[0][0] ; // (transition = 0) [0,0,0,0] ---0---> [0,0,0,0]
double sL1_1_0_0_0 = LLInput[1][0] ; // (transition = 0) [0,0,0,0] ---1---> [1,0,0,0]
double sL1_2_0_0_0 = LLInput[2][0] ; // (transition = 0) [0,0,0,0] ---a^1---> [a^1,0,0,0]
double sL1_3_0_0_0 = LLInput[3][0] ; // (transition = 0) [0,0,0,0] ---a^2---> [a^2,0,0,0]



 // Transition = 1
double sL2_0_0_0_0 =  sL1_0_0_0_0 + LLInput[0][1]  ; // (transition = 1) [0,0,0,0] ---0---> [0,0,0,0]
double sL2_1_1_0_0 =  sL1_1_0_0_0 + LLInput[1][1]  ; // (transition = 1) [1,0,0,0] ---1---> [1,1,0,0]
double sL2_2_2_0_0 =  sL1_2_0_0_0 + LLInput[2][1]  ; // (transition = 1) [a^1,0,0,0] ---a^1---> [a^1,a^1,0,0]
double sL2_3_3_0_0 =  sL1_3_0_0_0 + LLInput[3][1]  ; // (transition = 1) [a^2,0,0,0] ---a^2---> [a^2,a^2,0,0]



 // Transition = 2
double sL3_0_0_0_0 =  sL2_0_0_0_0 + LLInput[0][2]  ; // (transition = 2) [0,0,0,0] ---0---> [0,0,0,0]
double sL3_1_1_1_0 =  sL2_1_1_0_0 + LLInput[1][2]  ; // (transition = 2) [1,1,0,0] ---1---> [1,1,1,0]
double sL3_2_2_2_0 =  sL2_2_2_0_0 + LLInput[2][2]  ; // (transition = 2) [a^1,a^1,0,0] ---a^1---> [a^1,a^1,a^1,0]
double sL3_3_3_3_0 =  sL2_3_3_0_0 + LLInput[3][2]  ; // (transition = 2) [a^2,a^2,0,0] ---a^2---> [a^2,a^2,a^2,0]



 // Transition = 3
double sL4_0_0_0_0 =  sL3_0_0_0_0 + LLInput[0][3]  ; // (transition = 3) [0,0,0,0] ---0---> [0,0,0,0]
double sL4_1_1_1_2 =  sL3_1_1_1_0 + LLInput[2][3]  ; // (transition = 3) [1,1,1,0] ---a^1---> [1,1,1,a^1]
double sL4_2_2_2_3 =  sL3_2_2_2_0 + LLInput[3][3]  ; // (transition = 3) [a^1,a^1,a^1,0] ---a^2---> [a^1,a^1,a^1,a^2]
double sL4_3_3_3_1 =  sL3_3_3_3_0 + LLInput[1][3]  ; // (transition = 3) [a^2,a^2,a^2,0] ---1---> [a^2,a^2,a^2,1]


// output: 
*outLL[0] = sL4_0_0_0_0 ; // symbol = 0 
*outLL[1] = sL4_1_1_1_2 ; // symbol = 1 
*outLL[2] = sL4_2_2_2_3 ; // symbol = a^1 
*outLL[3] = sL4_3_3_3_1 ; // symbol = a^2 

// num of initializations = 16
// num of additions = 12
// num of LL additions = 0
}
